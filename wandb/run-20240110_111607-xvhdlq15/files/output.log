
Epoch 1/50:   0%|          | 0/2049 [00:00<?, ?img/s]
{'image': tensor([[[[219, 202, 181],
          [219, 202, 181],
          [219, 202, 181],
          ...,
          [210, 194, 178],
          [210, 194, 178],
          [172, 156, 140]],
         [[219, 202, 181],
          [219, 202, 181],
          [219, 202, 181],
          ...,
          [208, 192, 176],
          [202, 186, 170],
          [166, 150, 134]],
         [[219, 202, 181],
          [219, 202, 181],
          [219, 202, 181],
          ...,
          [208, 192, 179],
          [203, 186, 173],
          [170, 153, 140]],
         ...,
         [[221, 205, 189],
          [220, 204, 188],
          [220, 204, 188],
          ...,
          [161, 184, 246],
          [162, 183, 245],
          [158, 181, 243]],
         [[220, 204, 188],
          [219, 203, 187],
          [219, 203, 187],
          ...,
          [172, 193, 254],
          [169, 188, 249],
          [166, 187, 248]],
         [[220, 204, 188],
          [218, 202, 186],
          [218, 202, 186],
          ...,
          [174, 194, 252],
          [175, 194, 255],
          [174, 193, 254]]],
        [[[  0,   0,   0],
          [  0,   0,   0],
          [  0,   0,   0],
          ...,
          [235, 235, 235],
          [  0,   0,   0],
          [  0,   0,   0]],
         [[  0,   0,   0],
          [  0,   0,   0],
          [  0,   0,   0],
          ...,
          [226, 226, 226],
          [229, 229, 229],
          [  0,   0,   0]],
         [[  2,   0,   0],
          [  0,   0,   0],
          [  2,   0,   0],
          ...,
          [222, 222, 222],
          [222, 222, 222],
          [  1,   1,   1]],
         ...,
         [[ 60,  57,  59],
          [ 64,  61,  63],
          [ 72,  69,  71],
          ...,
          [  3,   2,   6],
          [  4,   3,   7],
          [  5,   4,   8]],
         [[ 60,  57,  59],
          [ 66,  63,  65],
          [ 72,  69,  71],
          ...,
          [  3,   2,   6],
          [  5,   4,   6],
          [  5,   4,   6]],
         [[ 59,  56,  58],
          [ 64,  61,  63],
          [ 70,  67,  69],
          ...,
          [  3,   2,   6],
          [  5,   4,   6],
          [  5,   4,   6]]],
        [[[ 11,  35,  87],
          [ 11,  35,  87],
          [ 11,  35,  87],
          ...,
          [  6,  14,  14],
          [  7,  15,  15],
          [  7,  15,  15]],
         [[ 11,  35,  87],
          [ 11,  35,  87],
          [ 11,  35,  87],
          ...,
          [  7,  15,  15],
          [  7,  15,  15],
          [  7,  15,  15]],
         [[ 11,  35,  87],
          [ 11,  35,  87],
          [ 11,  35,  87],
          ...,
          [  7,  15,  15],
          [  7,  15,  15],
          [  7,  15,  15]],
         ...,
         [[ 14,  17,  21],
          [ 13,  16,  20],
          [ 13,  16,  20],
          ...,
          [ 11,  17,  22],
          [ 11,  17,  22],
          [ 12,  18,  23]],
         [[ 14,  17,  21],
          [ 13,  16,  20],
          [ 14,  17,  21],
          ...,
          [ 11,  17,  22],
          [ 11,  17,  22],
          [ 12,  18,  23]],
         [[ 14,  17,  21],
          [ 13,  16,  20],
          [ 14,  17,  21],
          ...,
          [ 11,  17,  22],
          [ 11,  17,  22],
          [ 12,  18,  23]]],
        ...,
        [[[  0,   1,   0],
          [  0,   1,   0],
          [  0,   0,   0],
          ...,
          [  2,   0,   0],
          [  2,   0,   0],
          [  2,   0,   0]],
         [[  0,   0,   0],
          [  0,   0,   0],
          [  0,   0,   0],
          ...,
          [  2,   0,   0],
          [  2,   0,   0],
          [  2,   0,   0]],
         [[  0,   0,   0],
          [  0,   0,   0],
          [  0,   0,   0],
          ...,
          [  0,   0,   0],
          [  0,   0,   0],
          [  0,   0,   0]],
         ...,
         [[  1,   1,   1],
          [  0,   0,   0],
          [  0,   0,   0],
          ...,
          [154, 124, 119],
          [229, 194, 190],
          [255, 226, 222]],
         [[  0,   0,   0],
          [  0,   0,   0],
          [  0,   0,   0],
          ...,
          [131,  93,  89],
          [199, 156, 153],
          [243, 198, 195]],
         [[  0,   0,   0],
          [  0,   0,   0],
          [  0,   0,   0],
          ...,
          [116,  75,  72],
          [140,  92,  90],
          [181, 132, 130]]],
        [[[ 37,  38,  36],
          [ 38,  39,  37],
          [ 38,  39,  35],
          ...,
          [ 37,  31,  20],
          [ 38,  32,  21],
          [ 38,  32,  21]],
         [[ 37,  38,  36],
          [ 37,  38,  36],
          [ 38,  39,  35],
          ...,
          [ 38,  32,  21],
          [ 38,  32,  21],
          [ 38,  32,  21]],
         [[ 36,  37,  35],
          [ 36,  37,  35],
          [ 36,  37,  33],
          ...,
          [ 38,  31,  22],
          [ 38,  31,  22],
          [ 38,  31,  22]],
         ...,
         [[ 12,   8,   3],
          [ 12,   8,   3],
          [ 15,   9,   2],
          ...,
          [ 12,   9,   4],
          [ 10,   7,   2],
          [ 11,   8,   3]],
         [[ 10,   6,   1],
          [ 10,   6,   1],
          [ 14,   8,   1],
          ...,
          [ 15,  12,   7],
          [ 13,  10,   5],
          [ 13,  10,   5]],
         [[ 10,   6,   1],
          [ 10,   6,   1],
          [ 13,   7,   0],
          ...,
          [ 14,  11,   6],
          [ 14,  11,   6],
          [ 14,  11,   6]]],
        [[[ 26,   2, 228],
          [ 27,   3, 229],
          [ 28,   3, 231],
          ...,
          [118, 116, 182],
          [121, 119, 185],
          [121, 119, 185]],
         [[ 27,   3, 229],
          [ 27,   3, 229],
          [ 27,   2, 230],
          ...,
          [119, 117, 183],
          [121, 119, 185],
          [121, 119, 185]],
         [[ 29,   2, 229],
          [ 29,   2, 229],
          [ 28,   1, 229],
          ...,
          [119, 117, 183],
          [119, 117, 183],
          [119, 117, 183]],
         ...,
         [[ 94,  71,  76],
          [ 88,  65,  70],
          [ 86,  63,  68],
          ...,
          [101,  78,  83],
          [102,  80,  85],
          [ 99,  77,  82]],
         [[100,  77,  82],
          [ 92,  69,  74],
          [ 87,  64,  69],
          ...,
          [ 98,  75,  80],
          [100,  78,  83],
          [ 94,  72,  77]],
         [[102,  79,  84],
          [ 94,  71,  76],
          [ 87,  64,  69],
          ...,
          [ 97,  74,  79],
          [ 97,  75,  80],
          [ 91,  69,  74]]]], dtype=torch.uint8), 'mask': tensor([[[[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         ...,
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]]],
        [[[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         ...,
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]]],
        [[[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         ...,
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]]],
        ...,
        [[[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         ...,
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]]],
        [[[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         ...,
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]]],
        [[[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         ...,
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
          [255,   0,   0]],
         [[255,   0,   0],
          [255,   0,   0],
          [255,   0,   0],
          ...,
          [255,   0,   0],
          [255,   0,   0],
Epoch 1/50:   0%|          | 0/2049 [01:50<?, ?img/s]
Traceback (most recent call last):
  File "C:\Users\Mircea\Desktop\Computer Vision and Deep Learning\L4_Semantic_Segmentation_1\train.py", line 136, in <module>
    train_model()
  File "C:\Users\Mircea\Desktop\Computer Vision and Deep Learning\L4_Semantic_Segmentation_1\train.py", line 72, in train_model
    masks_pred = model(images)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Mircea\Desktop\Computer Vision and Deep Learning\L4_Semantic_Segmentation_1\UNet.py", line 63, in forward
    x1 = self.enc_1(x)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Mircea\Desktop\Computer Vision and Deep Learning\L4_Semantic_Segmentation_1\UNet.py", line 19, in forward
    return self.encode(x)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\container.py", line 215, in forward
    input = module(input)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\conv.py", line 460, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "C:\Users\Mircea\AppData\Local\Programs\Python\Python39\lib\site-packages\torch\nn\modules\conv.py", line 456, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
RuntimeError: Given groups=1, weight of size [64, 3, 3, 3], expected input[200, 250, 250, 3] to have 3 channels, but got 250 channels instead